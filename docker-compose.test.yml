version: '2.2'
networks:
  nat:
    external: false
  internal:
    external: false
services:
  mosquitto:
    env_file: .env
    build: ./services/broker
    ports:
      - '1883:1883' # mqtt
      - '1884:1883' # mqtts
      - '8883:8883' # websocket
    restart: unless-stopped
    networks:
      - nat
      - internal
    labels:
      - traefik.backend.mosquitto.noexpose
  couchdb:
    env_file: .env
    image: 'couchdb:3.1.0'
    restart: unless-stopped
    environment:
      - 'NODENAME=${NODENAME}'
      - 'COUCHDB_USER=${COUCHDB_USER}'
      - 'COUCHDB_PASSWORD=${COUCHDB_PASS}'
      - 'COUCHDB_ADMIN=${COUCHDB_USER}'
      - 'COUCHDB_PASS=${COUCHDB_PASS}'
      - 'COUCHDB_COOKIE=${COUCHDB_COOKIE}'
      - 'COUCHDB_SECRET=${COUCHDB_SECRET}'
    ports:
      - 5984:5984
    networks:
      - nat
      - internal
  thinx-redis:
    env_file: .env
    networks:
      - internal
    image: thinxcloud/redis
    command:
      - redis-server
      - '--requirepass'
      - '${REDIS_PASSWORD}'
      - '--port'
      - '6379'
    environment:
      - 'ALLOW_EMPTY_PASSWORD=no'
      - 'REDIS_PASSWORD=${REDIS_PASSWORD}'
      - 'REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL'
    restart: unless-stopped
    ports:
      - 6379
    labels:
      - traefik.backend.thinx-redis
  transformer:
    env_file: .env
    user: transformer
    image: thinxcloud/transformer
    restart: unless-stopped
    environment:
      - 'ROLLBAR_ACCESS_TOKEN=${ROLLBAR_ACCESS_TOKEN}'
      - 'ROLLBAR_ENVIRONMENT=${ROLLBAR_ENVIRONMENT}'
      - 'REVISION=1'
    networks:
      - internal
    ports:
      - 7474
    labels:
      - traefik.backend.transformer.noexpose

  worker:
    env_file: .env
    image: thinxcloud/worker:latest
#    build: ./services/worker
    restart: unless-stopped
    environment:
      - "ROLLBAR_ACCESS_TOKEN=${ROLLBAR_ACCESS_TOKEN}"
      - "ROLLBAR_ENVIRONMENT=${ROLLBAR_ENVIRONMENT}"
      - "THINX_SERVER=${THINX_SERVER}"
      - "WORKER_SECRET=${WORKER_SECRET}"
    networks:
      - internal
    labels:
      - traefik.backend.worker.noexpose
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker
      - /cache
      
  api:
    privileged: true
    shm_size: 2048M
    restart: "no"
    depends_on:
      - transformer
      - thinx-redis
      - mosquitto
    networks:
      - nat
      - internal
    env_file: .env
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        - 'AQUA_SEC_TOKEN=${AQUA_SEC_TOKEN}'
        - 'COUCHDB_PASS=${COUCHDB_PASS}'
        - 'COUCHDB_USER=${COUCHDB_USER}'
        - 'ENVIRONMENT=${ENVIRONMENT}'
        - 'ENTERPRISE=${ENTERPRISE}'
        - 'REDIS_PASSWORD=${REDIS_PASSWORD}'
        - 'REVISION=${REVISION}'
        - 'ROLLBAR_ACCESS_TOKEN=${ROLLBAR_ACCESS_TOKEN}'
        - 'ROLLBAR_ENVIRONMENT=${ROLLBAR_ENVIRONMENT}'
        - 'THINX_HOSTNAME=${THINX_HOSTNAME}'
        - 'THINX_OWNER_EMAIL=${THINX_OWNER_EMAIL}'
        - 'WORKER_SECRET=${WORKER_SECRET}'
        - 'MAILGUN_API_KEY=${MAILGUN_API_KEY}'
    environment:
      - 'AQUA_SEC_TOKEN=${AQUA_SEC_TOKEN}'
      - 'COUCHDB_PASS=${COUCHDB_PASS}'
      - 'COUCHDB_USER=${COUCHDB_USER}'
      - 'ENVIRONMENT=${ENVIRONMENT}'
      - 'ENTERPRISE=${ENTERPRISE}'
      - 'GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}'
      - 'GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}'
      - 'GITHUB_SECRET=${GITHUB_SECRET}'
      - 'GOOGLE_OAUTH_ID=${GOOGLE_OAUTH_ID}'
      - 'GOOGLE_OAUTH_SECRET=${GOOGLE_OAUTH_SECRET}'
      - 'REDIS_PASSWORD=${REDIS_PASSWORD}'
      - 'REVISION=${REVISION}'
      - 'ROLLBAR_ACCESS_TOKEN=${ROLLBAR_ACCESS_TOKEN}'
      - 'ROLLBAR_ENVIRONMENT=${ROLLBAR_ENVIRONMENT}'
      - 'SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}'
      - 'SLACK_CLIENT_ID=${SLACK_CLIENT_ID}'
      - 'SLACK_CLIENT_SECRET=${SLACK_CLIENT_SECRET}'
      - 'SLACK_WEBHOOK=${SLACK_WEBHOOK}'
      - 'THINX_HOSTNAME=${THINX_HOSTNAME}'
      - 'THINX_OWNER_EMAIL=${THINX_OWNER_EMAIL}'
      - 'WORKER_SECRET=${WORKER_SECRET}'
      - 'GITHUB_ACCESS_TOKEN=${GITHUB_ACCESS_TOKEN}'
      - 'MAILGUN_API_KEY=${MAILGUN_API_KEY}'
    ports:
      - '7442:7442'
      - '7443:7443'
      - '3000' # worker socket
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - '/var/lib/docker'
      - '/cache'
      - '/mnt/data/statistics:/mnt/data/statistics'
      - '/mnt/data/repos:/mnt/data/repos'
    labels:
      - traefik.docker.network=nat
      - traefik.enable=true
      - traefik.port=7442
      - traefik.backend=thinx-api
      - 'traefik.frontend.rule=Host:${THINX_HOSTNAME}'

  console:
    depends_on:
      - api
    env_file:
      - .env
    build:
      context: ./services/console/src
      args:
        - 'LANDING_HOSTNAME=${LANDING_HOSTNAME}'
        - 'WEB_HOSTNAME=${WEB_HOSTNAME}'
        - 'API_HOSTNAME=${API_HOSTNAME}'
        - 'API_BASEURL=${API_BASEURL}'
        - 'ENTERPRISE=${ENTERPRISE}'
        - 'ENVIRONMENT=${ENVIRONMENT}'
        - 'GOOGLE_ANALYTICS_ID=${GOOGLE_ANALYTICS_ID}'
        - 'ROLLBAR_ACCESS_TOKEN=${ROLLBAR_ACCESS_TOKEN}'
        - 'CRISP_WEBSITE_ID=${CRISP_WEBSITE_ID}'
    networks:
      - nat
      - internal
#    logging:
#      driver: none
    ports:
      - '8000:80'
    restart: unless-stopped # may be required for updating SSL certs
    environment:
      - 'LANDING_HOSTNAME=${LANDING_HOSTNAME}'
      - 'WEB_HOSTNAME=${WEB_HOSTNAME}'
      - 'API_HOSTNAME=${API_HOSTNAME}'
      - 'API_BASEURL=${API_BASEURL}'
      - 'ENTERPRISE=${ENTERPRISE}'
      - 'ENVIRONMENT=${ENVIRONMENT}'
      - 'GOOGLE_ANALYTICS_ID=${GOOGLE_ANALYTICS_ID}'
      - 'ROLLBAR_ACCESS_TOKEN=${ROLLBAR_ACCESS_TOKEN}'
      - 'CRISP_WEBSITE_ID=${CRISP_WEBSITE_ID}'
    labels:
      - traefik.enable=true
      - traefik.port=80
      - traefik.backend=console
      - 'traefik.frontend.rule=Host:${WEB_HOSTNAME}'
      - 'traefik.frontend.entryPoints=http,https'
      - traefik.frontend.headers.SSLRedirect=false
      - traefik.frontend.headers.SSLForceHost=true
      - 'traefik.frontend.headers.SSLHost=${WEB_HOSTNAME}'
#      - traefik.frontend.headers.forceSTSHeader=true
#      - traefik.frontend.headers.STSSeconds=315360000
#      - traefik.frontend.headers.STSIncludeSubdomains=true
#      - traefik.frontend.headers.STSPreload=true

  influxdb:
    image: influxdb:1.8
    ports:
      - '8086:8086'
    networks:
      - internal
    volumes:
      - '/mnt/gluster/thinx/influx:/var/lib/influxdb'
    environment:
      - INFLUXDB_DB=db0
      - INFLUXDB_ADMIN_USER=${INFLUXDB_USERNAME}
      - INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_PASSWORD}