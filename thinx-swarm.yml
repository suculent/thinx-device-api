# environment must be first imported using:
# $ export $(cat .env)
# until .env file is supported (if ever)

version: '3.7'

networks:
  traefik-public:
    external: true
  internal:
    driver: overlay
    attachable: true

services:
  mosquitto:
    image: ${REGISTRY}/thinx/mosquitto:cloud
    environment:
      - "MOSQUITTO_PASSWORD=${MOSQUITTO_PASSWORD}"
      - "MOSQUITTO_USERNAME=${MOSQUITTO_USERNAME}"
    ports:
      - 1883:1883
      - 8883:8883
    networks:
      - traefik-public
    volumes:
      - '/mnt/data/thinx/cloud/mosquitto/config:/mqtt/config:ro'
      - '/mnt/data/thinx/cloud/mosquitto/ssl:/mqtt/ssl:ro'
      - '/mnt/data/thinx/cloud/mosquitto/data:/mqtt/data:rw'
      - '/mnt/data/thinx/cloud/mosquitto/log:/mqtt/log:rw'
      - '/mnt/data/thinx/cloud/mosquitto/auth:/mqtt/auth:rw'
    deploy:
      resources:
        reservations:
          cpus: '0.2'
          memory: 64M
        limits:
          cpus: '0.5'
          memory: 128M
      placement:
        constraints:
          - node.hostname == thinx
      labels:
        - "traefik.enable=true"
        - "traefik.constraint-label=traefik-public"
        - "traefik.docker.network=traefik-public"
        - "traefik.http.services.mosquitto.loadbalancer.server.port=1883"
        - "swarmpit.service.deployment.autoredeploy=true"

  couchdb:
    env_file: .env
    image: 'couchdb:3.1.0'
    healthcheck:
      test:
        - CMD-SHELL
        - 'curl -XGET http://localhost:5984'
      interval: 10s
      timeout: 50s
      retries: 5
    environment:
      - "NODENAME=${NODENAME}"
      - "COUCHDB_USER=${COUCHDB_USER}"
      - "COUCHDB_PASSWORD=${COUCHDB_PASSWORD}"
      - "COUCHDB_ADMIN=${COUCHDB_USER}"
      - "COUCHDB_PASS=${COUCHDB_PASSWORD}"
      - "COUCHDB_COOKIE=${COUCHDB_COOKIE}"
      - "COUCHDB_SECRET=${COUCHDB_SECRET}"
    ports:
      - 5984:5984 # not in production!
    networks:
      - traefik-public # not in production!
#      - internal # for production

    volumes:
    
      - type: bind
        source: /mnt/data/thinx/cloud/couchdb
        target: /opt/couchdb/data

      - type: bind
        source: /mnt/data/thinx/cloud/vm.args
        target: /opt/couchdb/etc/vm.args

      # probably deprecated
      - type: bind
        source: /mnt/data/thinx/cloud/couchdb
        target: /var/lib/couchdb

    deploy:
      resources:
        reservations:
          cpus: '1.0'
          memory: 512M
        limits:
          cpus: '1.0'
          memory: 1024M
      placement:
        constraints:
          - node.hostname == thinx
      labels:
        - "swarmpit.service.deployment.autoredeploy=true"


  thinx-redis:
    env_file: .env
    networks:
      - internal
    image: ${REGISTRY}/thinx/redis:cloud
    command:
      - redis-server
      - '--requirepass'
      - '${REDIS_PASSWORD}'
      - '--port'
      - '6379'
    environment:
      - "ALLOW_EMPTY_PASSWORD=no"
      - "REDIS_PASSWORD=${REDIS_PASSWORD}"
      - "REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL"
    ports:
      - 6379
    volumes:
      - '/mnt/data/thinx/cloud/redis:/data'
    deploy:
      resources:
        reservations:
          cpus: '0.5'
          memory: 32M
        limits:
          cpus: '1.0'
          memory: 512M
      placement:
        constraints:
          - node.hostname == thinx
      labels:
        - "swarmpit.service.deployment.autoredeploy=true"

  transformer:
    env_file: .env
    user: transformer
    image: ${REGISTRY}/thinx/transformer:cloud
    environment:
      - "SQREEN_APP_NAME: ${SQREEN_APP_NAME}"
      - "SQREEN_TOKEN=${SQREEN_TOKEN}"
      - "ROLLBAR_ACCESS_TOKEN=${ROLLBAR_ACCESS_TOKEN}"
      - "ROLLBAR_ENVIRONMENT=${ROLLBAR_ENVIRONMENT}"
      - "REVISION=2"
    networks:
      - internal
    ports:
      - 7474
    labels:
      - traefik.backend.transformer.noexpose
    deploy:
      resources:
        reservations:
          cpus: '0.2'
          memory: 256M
        limits:
          cpus: '1.0'
          memory: 256M
      placement:
        constraints:
          - node.hostname == thinx
      labels:
        - "swarmpit.service.deployment.autoredeploy=true"
      
  api:
    depends_on:
      - transformer
      - thinx-redis
      - mosquitto
#      couchdb:
#        condition: service_started
#      transformer:
#        condition: service_started
#      thinx-redis:
#        condition: service_started
#      mosquitto:
#          condition: service_healthy
    networks:
      - traefik-public
      - internal
    env_file: .env
    image: ${REGISTRY}/thinx/api:cloud
    environment:
      - "ENVIRONMENT=${ENVIRONMENT}"
      - "COUCHDB_USER=${COUCHDB_USER}"
      - "COUCHDB_PASSWORD=${COUCHDB_PASSWORD}"
      - "MOSQUITTO_PASSWORD=${MOSQUITTO_PASSWORD}"
      - "MOSQUITTO_USERNAME=${MOSQUITTO_USERNAME}"
    ports:
      - '7442:7442'
      - '7443:7443'
      - '7444:7444'
      - '7445:7445'
      - '9002:9002'
    volumes:
      - '/mnt/data/thinx/cloud/deploy:/mnt/data/deploy'
      - '/mnt/data/thinx/cloud/mosquitto:/mnt/data/mosquitto'
      - '/mnt/data/thinx/cloud/repos:/mnt/data/repos'
      - '/mnt/data/thinx/cloud/ssl:/mnt/data/ssl'
      - '/mnt/data/thinx/cloud/ssh_keys:/mnt/data/ssh_keys'
      - '/mnt/data/thinx/cloud/conf:/mnt/data/conf'
      - '/mnt/data/thinx/cloud/test-reports:/mnt/data/test-reports'
      - '/var/run/docker.sock:/var/run/docker.sock'
      - '/var/lib/docker'
      - '/cache'
    deploy:
      resources:
        reservations:
          cpus: '0.5'
          memory: 2048M
        limits:
          cpus: '1.0'
          memory: 3072M
      placement:
        constraints:
          - node.hostname == thinx
      labels:
        - "traefik.http.services.thinx-api.loadbalancer.server.port=7442"
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-public"
        - "traefik.constraint-label=traefik-public"

        - "traefik.http.routers.thinx-api-http.rule=Host(`${THINX_HOSTNAME}`)"
        - "traefik.http.routers.thinx-api-http.entrypoints=http,thxp"
        - "traefik.http.routers.thinx-api-http.middlewares=https-redirect"

        - "traefik.http.routers.thinx-api-https.rule=Host(`${THINX_HOSTNAME}`)"
        - "traefik.http.routers.thinx-api-https.entrypoints=https,thxps"
        - "traefik.http.routers.thinx-api-https.tls=true"
        - "traefik.http.routers.thinx-api-https.tls.certresolver=le"

        - "swarmpit.service.deployment.autoredeploy=true"


  console:
    depends_on:
      - api
    env_file: .env
    image: ${REGISTRY}/thinx/console:cloud
    networks:
      - traefik-public
#      - internal # why?
    ports:
      - 7440:80
#    logging:
#      driver: none
    environment:
      - "NGINX_PORT=80"
      - "NGINX_HOST=${WEB_HOSTNAME}"
      - "LANDING_HOSTNAME=${LANDING_HOSTNAME}"
      - "WEB_HOSTNAME=${WEB_HOSTNAME}"
      - "API_HOSTNAME=${API_HOSTNAME}"
      - "API_BASEURL=${API_BASEURL}"
      - "ENTERPRISE=${ENTERPRISE}"
      - "ENVIRONMENT=${ENVIRONMENT}"
      - "GOOGLE_ANALYTICS_ID=${GOOGLE_ANALYTICS_ID}"
      - "ROLLBAR_ACCESS_TOKEN=${ROLLBAR_ACCESS_TOKEN}"
      - "CRISP_WEBSITE_ID=${CRISP_WEBSITE_ID}"
    deploy:
      resources:
        reservations:
          cpus: '0.5'
          memory: 32M
        limits:
          cpus: '1.0'
          memory: 256M
      placement:
        constraints:
          - node.hostname == thinx
      labels:
        # should be 7440, but the 80 port of container is exposed anyway in swarm mode
        - "traefik.http.services.thinx-console.loadbalancer.server.port=80"
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-public"
        - "traefik.constraint-label=traefik-public"

        - "traefik.http.routers.thinx-console-http.rule=Host(`${WEB_HOSTNAME}`)"
        - "traefik.http.routers.thinx-console-http.entrypoints=http"
        - "traefik.http.routers.thinx-console-http.middlewares=https-redirect"

        - "traefik.http.routers.thinx-console-https.rule=Host(`${WEB_HOSTNAME}`)"
        - "traefik.http.routers.thinx-console-https.entrypoints=https"
        - "traefik.http.routers.thinx-console-https.tls=true"
        - "traefik.http.routers.thinx-console-https.tls.certresolver=le"

        - "swarmpit.service.deployment.autoredeploy=true"