version: 2.1
orbs:
  node: circleci/node@3.0.0
  docker: circleci/docker@1.5.0

jobs:

  build-mosquitto-cloud:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - run:
          command: |
            rm -rf ./package-lock.json
      - docker/check:
          registry: registry.thinx.cloud:5000
      - docker/build:
          registry: registry.thinx.cloud:5000
          image: thinx/mosquitto
          docker-context: services/broker
          dockerfile: services/broker/Dockerfile
          extra_build_args: '--build-arg MOSQUITTO_USERNAME=${MOSQUITTO_USERNAME} --build-arg MOSQUITTO_PASSWORD=${MOSQUITTO_PASSWORD}'
          tag: 'swarm'
      - docker/push:
          digest-path: /tmp/digest.txt
          image: thinx/mosquitto
          registry: registry.thinx.cloud:5000
          tag: 'swarm'

  build-redis-cloud:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - run:
          command: |
            rm -rf ./package-lock.json
      - docker/check:
          registry: registry.thinx.cloud:5000
      - docker/build:
          registry: registry.thinx.cloud:5000
          image: thinx/redis
          docker-context: services/redis
          dockerfile: services/redis/Dockerfile
          extra_build_args: '--build-arg REDIS_PASSWORD=${REDIS_PASSWORD} --build-arg ALLOW_EMPTY_PASSWORD=no --build-arg REDIS_DISABLE_COMMANDS=FLUSHALL'
          tag: 'swarm'
      - docker/push:
          digest-path: /tmp/digest.txt
          image: thinx/redis
          registry: registry.thinx.cloud:5000
          tag: 'swarm'

  build-transformer-cloud:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - run:
          command: |
            rm -rf ./app/package-lock.json
      - docker/check:
          registry: registry.thinx.cloud:5000
      - docker/build:
          registry: registry.thinx.cloud:5000
          image: thinx/transformer
          docker-context: services/transformer
          dockerfile: services/transformer/Dockerfile
          extra_build_args: |
            --build-arg ROLLBAR_ACCESS_TOKEN=${ROLLBAR_ACCESS_TOKEN} \
            --build-arg SQREEN_TOKEN=${SQREEN_TOKEN} \
            --build-arg ROLLBAR_ENVIRONMENT=${ENVIRONMENT} \
            --build-arg REVISION=$(git describe --abbrev=0) \
          tag: 'swarm'
      - docker/push:
          digest-path: /tmp/digest.txt
          image: thinx/transformer
          registry: registry.thinx.cloud:5000
          tag: 'swarm'

  build-worker-cloud:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - docker/check:
          registry: registry.thinx.cloud:5000
      - docker/build:
          registry: registry.thinx.cloud:5000
          docker-context: services/worker
          image: thinx/worker
          dockerfile: ./services/worker/Dockerfile
          extra_build_args: |
            --build-arg REVISION=$(git describe --abbrev=0) \
          tag: 'swarm'
      - docker/push:
          digest-path: /tmp/digest.txt
          image: thinx/worker
          registry: registry.thinx.cloud:5000
          tag: 'swarm'

  build-console-cloud:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - docker/check:
          registry: registry.thinx.cloud:5000
      - docker/build:
          registry: registry.thinx.cloud:5000
          docker-context: services/console/src
          image: thinx/console
          dockerfile: services/console/src/Dockerfile
          extra_build_args: |
            --build-arg ROLLBAR_ACCESS_TOKEN=${ROLLBAR_ACCESS_TOKEN} \
            --build-arg LANDING_HOSTNAME=${LANDING_HOSTNAME} \
            --build-arg API_HOSTNAME=${API_HOSTNAME} \
            --build-arg API_BASEURL=${API_BASEURL} \
            --build-arg WEB_HOSTNAME=${WEB_HOSTNAME} \
            --build-arg NGINX_HOST=${WEB_HOSTNAME} \
            --build-arg GOOGLE_ANALYTICS_ID=${GOOGLE_ANALYTICS_ID} \
            --build-arg CRISP_WEBSITE_ID=${CRISP_WEBSITE_ID} \
            --build-arg NGINX_PORT=80 \
            --build-arg ENTERPRISE=true \
            --build-arg ENVIRONMENT=${ENVIRONMENT} \
          tag: 'swarm'
      - docker/push:
          digest-path: /tmp/digest.txt
          image: thinx/console
          registry: registry.thinx.cloud:5000
          tag: 'swarm'

  build-api-cloud:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - docker/check:
          registry: registry.thinx.cloud:5000
      - docker/build:
          registry: registry.thinx.cloud:5000
          image: thinx/api
          dockerfile: ./Dockerfile
          extra_build_args: |
            --build-arg AQUA_SEC_TOKEN=${AQUA_SEC_TOKEN} \
            --build-arg SNYK_TOKEN=${SNYK_TOKEN} \
            --build-arg ENVIRONMENT=${ENVIRONMENT} \
            --build-arg REVISION=$(git describe --abbrev=0) \
          tag: 'swarm'
      - docker/push:
          digest-path: /tmp/digest.txt
          image: thinx/api
          registry: registry.thinx.cloud:5000
          tag: 'swarm'

  build-mosquitto:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - run:
          command: |
            rm -rf ./package-lock.json
      - docker/check:
          registry: registry.thinx.cloud:5000
      - docker/build:
          registry: registry.keyguru.eu:5000
          image: thinx/mosquitto
          docker-context: services/broker
          dockerfile: services/broker/Dockerfile
          extra_build_args: '--build-arg MOSQUITTO_USERNAME=${MOSQUITTO_USERNAME} --build-arg MOSQUITTO_PASSWORD=${MOSQUITTO_PASSWORD}'
          tag: '${COUNTRY}'
      - docker/push:
          digest-path: /tmp/digest.txt
          image: thinx/mosquitto
          registry: registry.keyguru.eu:5000
          tag: '${COUNTRY}'

  build-redis:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - run:
          command: |
            rm -rf ./package-lock.json
      - docker/check:
          registry: registry.keyguru.eu:5000
      - docker/build:
          registry: registry.keyguru.eu:5000
          image: thinx/redis
          docker-context: services/redis
          dockerfile: services/redis/Dockerfile
          extra_build_args: '--build-arg REDIS_PASSWORD=${REDIS_PASSWORD} --build-arg ALLOW_EMPTY_PASSWORD=no --build-arg REDIS_DISABLE_COMMANDS=FLUSHALL'
          tag: '${COUNTRY}'
      - docker/push:
          digest-path: /tmp/digest.txt
          image: thinx/redis
          registry: registry.keyguru.eu:5000
          tag: '${COUNTRY}'

  build-transformer:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - run:
          command: |
            rm -rf ./app/package-lock.json
      - docker/check:
          registry: registry.keyguru.eu:5000
      - docker/build:
          registry: registry.keyguru.eu:5000
          image: thinx/transformer
          docker-context: services/transformer
          dockerfile: services/transformer/Dockerfile
          extra_build_args: |
            --build-arg ROLLBAR_ACCESS_TOKEN=${ROLLBAR_ACCESS_TOKEN} \
            --build-arg SQREEN_TOKEN=${SQREEN_TOKEN} \
            --build-arg ROLLBAR_ENVIRONMENT=${ENVIRONMENT} \
            --build-arg REVISION=$(git describe --abbrev=0) \
          tag: '${COUNTRY}'
      - docker/push:
          digest-path: /tmp/digest.txt
          image: thinx/transformer
          registry: registry.keyguru.eu:5000
          tag: '${COUNTRY}'

  build-worker:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - docker/check:
          registry: registry.keyguru.eu:5000
      - docker/build:
          registry: registry.keyguru.eu:5000
          docker-context: services/worker
          image: thinx/worker
          dockerfile: ./services/worker/Dockerfile
          extra_build_args: |
            --build-arg REVISION=$(git describe --abbrev=0) \
          tag: 'latest'
      - docker/push:
          digest-path: /tmp/digest.txt
          image: thinx/worker
          registry: registry.keyguru.eu:5000
          tag: 'latest'

  build-console:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - docker/check:
          registry: registry.keyguru.eu:5000
      - docker/build:
          registry: registry.keyguru.eu:5000
          docker-context: services/console/src
          image: thinx/console
          dockerfile: services/console/src/Dockerfile
          extra_build_args: |
            --build-arg ROLLBAR_ACCESS_TOKEN=${ROLLBAR_ACCESS_TOKEN} \
            --build-arg SQREEN_TOKEN=${SQREEN_TOKEN} \
            --build-arg LANDING_HOSTNAME=${LANDING_HOSTNAME} \
            --build-arg WEB_HOSTNAME=${WEB_HOSTNAME} \
            --build-arg NGINX_HOST=${WEB_HOSTNAME} \
            --build-arg API_HOSTNAME=${API_HOSTNAME} \
            --build-arg API_BASEURL=${API_BASEURL} \
            --build-arg GOOGLE_ANALYTICS_ID=${GOOGLE_ANALYTICS_ID} \
            --build-arg CRISP_WEBSITE_ID=${CRISP_WEBSITE_ID} \
            --build-arg NGINX_PORT=80 \
            --build-arg ENTERPRISE=true \
            --build-arg ENVIRONMENT=${ENVIRONMENT} \
            --build-arg ROLLBAR_ENVIRONMENT=${ENVIRONMENT} \
            --build-arg REVISION=$(git describe --abbrev=0) \
          tag: '${COUNTRY}'
      - docker/push:
          digest-path: /tmp/digest.txt
          image: thinx/console
          registry: registry.keyguru.eu:5000
          tag: '${COUNTRY}'

  build-api:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - docker/check:
          registry: registry.keyguru.eu:5000
      - docker/build:
          registry: registry.keyguru.eu:5000
          image: thinx/api
          dockerfile: ./Dockerfile
          extra_build_args: |
            --build-arg AQUA_SEC_TOKEN=${AQUA_SEC_TOKEN} \
            --build-arg SNYK_TOKEN=${SNYK_TOKEN} \
            --build-arg ENVIRONMENT=${ENVIRONMENT} \
            --build-arg REVISION=$(git describe --abbrev=0) \
          tag: '${COUNTRY}'
      - docker/push:
          digest-path: /tmp/digest.txt
          image: thinx/api
          registry: registry.keyguru.eu:5000
          tag: '${COUNTRY}'

#
# DEPRECATED BUILD, KEEPING FOR TEST PURPOSES LATER
#

  build:

    # In CircleCI 2.0 you can now specify your own image, or use one of our pre-configured images.
    docker:
      - image: suculent/thinx_baseline:first
        auth:
          username: $DOCKER_USERNAME  # can specify string literal values
          password: $DOCKER_PASSWORD  # or project environment variable reference

    working_directory: ~/suculent/thinx-device-api

    parallelism: 1

    shell: /bin/bash --login

    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
      REDIS_URL: redis://localhost:6379

    steps:

    - run:
        name: Install Docker client
        command: |
            set -x
            VER="18.06.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin

    - run:
        name: Install Docker Compose
        command: |
          curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
          chmod +x ~/docker-compose
          mv ~/docker-compose /usr/local/bin/docker-compose

    - setup_remote_docker

    - checkout

    # Spectralops.io integration
    - run: curl -L "https://get.spectralops.io/api/download/get?dsn=$SPECTRAL_DSN" | sh
    - run: spectral scan

    # Restore the dependency cache
    - restore_cache:
        keys:
          # This branch if available
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

    - run:
        name: Fetch all submodules and tests
        command: |
          git submodule foreach --recursive 'git submodule sync' && git submodule update --init --recursive
          cd spec/test_repositories && bash ./get-tests.sh

    - run:
        name: Create Circle CI Artifacts Folders
        command: |
          mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
          mkdir -p $CIRCLE_TEST_REPORTS/reports

    - save_cache:
        paths:
          - node_modules
        key: v1-dependencies-{{ checksum "package.json" }}

    - run:
        name: Init filesystem
        command: |
            mkdir -p /mnt/data/
            mkdir -p /mnt/data && cp -R ./conf /mnt/data
            mkdir -p /mnt/data/ssh_keys
            mkdir -p /mnt/data/mosquitto/auth
            mkdir -p /mnt/data/mosquitto/config
            mkdir -p /mnt/data/mosquitto/data
            mkdir -p /mnt/data/mosquitto/log
            mkdir -p /mnt/data/mosquitto/ssl
            mkdir -p /mnt/data/couchdb
            mkdir -p /mnt/data/deploy
            mkdir -p /mnt/data/data
            mkdir -p /mnt/data/redis
            mkdir -p /mnt/data/repos
            mkdir -p /mnt/data/ssl
            mkdir -p /mnt/data/test-reports

    - run:
        name: Setup environment
        command: |
          rm -rf ./Dockerfile
          mv ./Dockerfile.test ./Dockerfile
          cp -vf ./.env.dist ./.env
          cp -vf ./.env ./services/broker/.env
          cp -vf ./.env ./services/console/.env
          cp -vf ./.env ./services/couchdb/.env
          cp -vf ./.env ./services/redis/.env
          cp -vf ./.env ./services/transformer/.env
          cp -vf ./conf/config-test.json ./conf/config.json
          cp -vfR ./conf /mnt/data/
          echo "Contents of /mnt/data/conf"
          ls -la /mnt/data/conf
          cp -vf ./.env ./.thinx_env
          sed -i -e 's/^/export /' ./.thinx_env # create from .thinx_env from .env
          # echo ".thinx_env contents:"
          # cat ./.thinx_env
          echo "Contents of ./conf"
          ls -la ./conf
          echo "Contents of ./.env"
          cat ./.env
          echo "Contents of /mnt/data/mosquitto/**"
          ls -la /mnt/data/mosquitto/**
          cp -vf ./services/broker/config/thinx.acl.dist /mnt/data/mosquitto/auth/thinx.acl
          echo "Contents of /mnt/data/mosquitto/auth/thinx.acl"
          cat /mnt/data/mosquitto/auth/thinx.acl
          cp -vf ./services/broker/config/mosquitto.conf.dist /mnt/data/mosquitto/config/mosquitto.conf
          echo "Contents of /mnt/data/mosquitto/config/mosquitto.conf"
          cat /mnt/data/mosquitto/config/mosquitto.conf
          echo "Creating Docker Network (ID):"
          docker network create nat

    - run:
        name: Starting Mosquitto
        command: |
          docker-compose up -d --build mosquitto

    - run:
        name: Starting Redis
        command: |
          docker-compose up -d --build thinx-redis

    - run:
        name: Starting Transformer
        command: |
          docker-compose up -d --build transformer

    - run:
        name: Starting CouchDB and API Test
        command: |
          export ENVIRONMENT=test
          docker-compose up -d --build couchdb
          echo "###### > Waiting at least 60 seconds for CouchDB to start up..."
          timeout 60 docker-compose logs -f --timestamp
          docker-compose up -d --build api
          echo "###### > Tailing logs for ten minutes from now on:"
          date
          timeout 600 docker-compose logs -f --timestamp
          echo "###### > Tailing completed, stopping test."
          date
          docker-compose stop

    - run:
        name: Check running Docker containers
        command: |
            docker ps
            docker network ls
            docker network inspect bridge

#
# WORKFLOWS
#

workflows:
  build-and-deploy-components:
    jobs:
    
      - build:
          filters:
            branches:
              only:
                - master

      - build-api-cloud:
          context:
            - thinx-docker-repo
          filters:
            branches:
              only:
                - thinx-swarm
      - build-console-cloud:
          context:
            - thinx-docker-repo
          filters:
            branches:
              only:
                - thinx-swarm
      - build-mosquitto-cloud:
          context:
            - thinx-docker-repo
          filters:
            branches:
              only:
                - thinx-swarm
      - build-redis-cloud:
          context:
            - thinx-docker-repo
          filters:
            branches:
              only:
                - thinx-swarm
      - build-transformer-cloud:
          context:
            - thinx-docker-repo
          filters:
            branches:
              only:
                - thinx-swarm
      - build-worker-cloud:
          context:
            - thinx-docker-repo
          filters:
            branches:
              only:
                - thinx-swarm
      
      # .com build, currently unused
      # - build-api:
      #     filters:
      #       branches:
      #         only:
      #           - keyguru-swarm
      # - build-console:
      #     filters:
      #       branches:
      #         only:
      #           - keyguru-swarm
      # - build-mosquitto:
      #     filters:
      #       branches:
      #         only:
      #           - keyguru-swarm
      # - build-redis:
      #     filters:
      #       branches:
      #         only:
      #           - keyguru-swarm
      # - build-transformer:
      #     filters:
      #       branches:
      #         only:
      #           - keyguru-swarm

      # kgr.cz

      - build-api:
          name: "api : kgr.cz"
          context:
            - thinx-staging-cz
          filters:
            branches:
              only:
                - keyguru-swarm
      - build-console:
          name: "console : kgr.cz"
          context:
            - thinx-staging-cz
          filters:
            branches:
              only:
                - keyguru-swarm
      - build-mosquitto:
          name: "mosquitto : kgr.cz"
          context:
            - thinx-staging-cz
          filters:
            branches:
              only:
                - keyguru-swarm
      - build-redis:
          name: "redis : kgr.cz"
          context:
            - thinx-staging-cz
          filters:
            branches:
              only:
                - keyguru-swarm
      - build-transformer:
          name: "transformer : kgr.cz"
          context:
            - thinx-staging-cz
          filters:
            branches:
              only:
                - keyguru-swarm
      - build-worker:
          name: "worker : kgr.cz"
          context:
            - thinx-staging-cz
          filters:
            branches:
              only:
                - keyguru-swarm

      # keyguru.at

      - build-api:
          name: "api : keyguru.at"
          context:
            - thinx-staging-at
          filters:
            branches:
              only:
                - keyguru-swarm
      - build-console:
          name: "console : keyguru.at"
          context:
            - thinx-staging-at
          filters:
            branches:
              only:
                - keyguru-swarm
      - build-mosquitto:
          name: "mosquitto : keyguru.at"
          context:
            - thinx-staging-at
          filters:
            branches:
              only:
                - keyguru-swarm
      - build-redis:
          name: "redis : keyguru.at"
          context:
            - thinx-staging-at
          filters:
            branches:
              only:
                - keyguru-swarm
      - build-transformer:
          name: "transformer : keyguru.at"
          context:
            - thinx-staging-at
          filters:
            branches:
              only:
                - keyguru-swarm
      - build-worker:
          name: "transformer : keyguru.at"
          context:
            - thinx-staging-at
          filters:
            branches:
              only:
                - keyguru-swarm