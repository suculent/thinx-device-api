version: 2.1
orbs:
  node: circleci/node@6.3.0
  docker: circleci/docker@2.7.1
  slack: circleci/slack@5.0.0

jobs:

  build-base:
    executor: docker/docker
    steps:
      - setup_remote_docker:
          version: previous
      - checkout
      - docker/check
      - run:
          name: Clean up artifacts
          command: |
            cd base && rm -rf ./node_modules
      - docker/build:
          docker-context: base
          image: thinxcloud/base
          dockerfile: ./base/Dockerfile
          extra_build_args: |
            --build-arg REVISION=$(git describe --abbrev=0) \
          tag: latest
      - docker/push:
          digest-path: /tmp/digest.txt
          image: thinxcloud/base
          tag: latest

  build-console-cloud:
    executor: docker/docker
    steps:
      - setup_remote_docker:
          version: previous
      - checkout
      - run:
          name: Fetch all dependencies (esp. console)
          command: |
            git submodule foreach --recursive 'git submodule sync' && git submodule update --init --recursive
      - docker/check:
          registry: registry.thinx.cloud:5000
      - docker/build:
          registry: registry.thinx.cloud:5000
          docker-context: services/console/vue
          image: thinx/console
          dockerfile: services/console/vue/Dockerfile
          extra_build_args: |
            --build-arg ROLLBAR_ACCESS_TOKEN=${ROLLBAR_ACCESS_TOKEN} \
            --build-arg LANDING_HOSTNAME=${LANDING_HOSTNAME} \
            --build-arg API_HOSTNAME=${API_HOSTNAME} \
            --build-arg API_BASEURL=${API_BASEURL} \
            --build-arg WEB_HOSTNAME=${WEB_HOSTNAME} \
            --build-arg GOOGLE_ANALYTICS_ID=${GOOGLE_ANALYTICS_ID} \
            --build-arg CRISP_WEBSITE_ID=${CRISP_WEBSITE_ID} \
            --build-arg ENTERPRISE=${ENTERPRISE} \
            --build-arg ENVIRONMENT=${ENVIRONMENT} \
            --build-arg COMMIT_ID=$CIRCLE_SHA1 \
            --build-arg VUE_APP_CRISP_WEBSITE_ID=${CRISP_WEBSITE_ID} \
            --build-arg VUE_APP_API_HOSTNAME=${VUE_APP_API_HOSTNAME} \
            --build-arg VUE_APP_ROLLBAR_ACCESS_TOKEN=${ROLLBAR_ACCESS_TOKEN} \
            --build-arg VUE_APP_LANDING_HOSTNAME=${LANDING_HOSTNAME} \
            --build-arg VUE_APP_GOOGLE_ANALYTICS_ID=${GOOGLE_ANALYTICS_ID} \
            --build-arg VUE_APP_GOOGLE_MAPS_APIKEY=${GOOGLE_MAPS_APIKEY} \
            --build-arg VUE_APP_CONSOLE_HOSTNAME=${WEB_HOSTNAME} \
          tag: 'vue'
      - docker/push:
          digest-path: /tmp/digest.txt
          image: thinx/console
          registry: registry.thinx.cloud:5000
          tag: 'vue'

  build-console-classic:
    executor: docker/docker
    steps:
      - setup_remote_docker:
          version: 20.10.24
      - checkout
      - run:
          name: Fetch all dependencies (esp. console)
          command: |
            git submodule foreach --recursive 'git submodule sync' && git submodule update --init --recursive
      - docker/check:
          registry: registry.thinx.cloud:5000
      - docker/build:
          registry: registry.thinx.cloud:5000
          docker-context: services/console/src
          image: thinx/console
          dockerfile: services/console/src/Dockerfile
          extra_build_args: '--build-arg ROLLBAR_ACCESS_TOKEN=${ROLLBAR_ACCESS_TOKEN} --build-arg LANDING_HOSTNAME=${LANDING_HOSTNAME} --build-arg API_HOSTNAME=${API_HOSTNAME} --build-arg API_BASEURL=${API_BASEURL} --build-arg WEB_HOSTNAME=${WEB_HOSTNAME} --build-arg GOOGLE_ANALYTICS_ID=${GOOGLE_ANALYTICS_ID} --build-arg CRISP_WEBSITE_ID=${CRISP_WEBSITE_ID} --build-arg ENTERPRISE=${ENTERPRISE} --build-arg ENVIRONMENT=${ENVIRONMENT} --build-arg COMMIT_ID=$CIRCLE_SHA1 --build-arg VERSION_CODE=$(echo $CIRCLE_SHA1 | cut -c -7)'
          tag: 'swarm'
      - docker/push:
          digest-path: /tmp/digest.txt
          image: thinx/console
          registry: registry.thinx.cloud:5000
          tag: 'swarm'

  build-api-cloud:
    executor: docker/docker
    steps:
      - setup_remote_docker:
          version: previous
      - checkout
      - run:
          name: Clean package-lock
          command: |
            rm -rf ./package-lock.json
      - docker/check
      - docker/build:
          image: thinxcloud/api
          dockerfile: ./Dockerfile
          extra_build_args: '--build-arg AQUA_SEC_TOKEN=${AQUA_SEC_TOKEN} --build-arg SNYK_TOKEN=${SNYK_TOKEN} --build-arg ENVIRONMENT=${ENVIRONMENT} --build-arg REVISION=$(git describe --abbrev=0) --build-arg ENTERPRISE=${ENTERPRISE}'
          tag: 'latest'
      - docker/push:
          digest-path: /tmp/digest.txt
          image: thinxcloud/api
          tag: 'latest'
      - slack/notify:
          template: success_tagged_deploy_1
          event: pass
      - slack/notify:
          template: basic_fail_1
          event: fail
  
  test:

    docker:
      - image: thinxcloud/base:alpine
        auth:
          username: $DOCKER_USERNAME  # from thinx-docker-repo, docker.io
          password: $DOCKER_PUBLIC_PASSWORD  # or project environment variable reference
    
    # because the tests do not consume much of RAM or CPU, this probably won't cause any more slowdown
    resource_class: large

    working_directory: ~/suculent/thinx-device-api

    parallelism: 1

    shell: /bin/sh --login

    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
      REDIS_URL: redis://localhost:6379

    steps:

    - run:
        name: Install Docker Compose
        environment:
          COMPOSE_VERSION: '1.29.2'
        command: |
          DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
          mkdir -p $DOCKER_CONFIG/cli-plugins
          curl -SL https://github.com/docker/compose/releases/download/v2.4.1/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
          chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
          docker compose version

    - setup_remote_docker:
          version: previous

    - checkout

    # Restore the dependency cache
    - restore_cache:
        keys:
          # This branch if available
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

    - run:
        name: Fetch all submodules and tests
        command: |
          rm -rf ./package-lock.json
          git submodule foreach --recursive 'git submodule sync' && git submodule update --init --recursive
          cd spec/test_repositories
          pwd
          sh ./get-tests.sh

    - run:
        name: Create Circle CI Artifacts Folders
        command: |
          mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
          mkdir -p $CIRCLE_TEST_REPORTS/reports

    - save_cache:
        paths:
          - node_modules
        key: v1-dependencies-{{ checksum "package.json" }}

    - run:
        name: Init filesystem
        command: |
            mkdir -p /mnt/data/
            mkdir -p /mnt/data && cp -R ./conf /mnt/data
            mkdir -p /mnt/data/ssh_keys && cp -R ./spec/mnt/data/ssh_keys /mnt/data
            mkdir -p /mnt/data/mosquitto/auth
            mkdir -p /mnt/data/mosquitto/config
            mkdir -p /mnt/data/mosquitto/data
            mkdir -p /mnt/data/mosquitto/log
            mkdir -p /mnt/data/mosquitto/ssl
            mkdir -p /mnt/data/couchdb
            mkdir -p /mnt/data/deploy
            mkdir -p /mnt/data/data
            mkdir -p /mnt/data/redis
            mkdir -p /mnt/data/repos
            mkdir -p /mnt/data/ssl
            mkdir -p /mnt/data/test-reports

    - run:
        name: Switch to Test Dockerfiles
        command: |
          rm -rf ./Dockerfile
          mv ./Dockerfile.test ./Dockerfile
          rm -rf ./docker-compose.yml
          mv ./docker-compose.test.yml ./docker-compose.yml
          rm -rf ./services/broker/Dockerfile
          mv ./services/broker/Dockerfile.test ./services/broker/Dockerfile
          sed -i "s/.git//g" .dockerignore

    - run:
        name: Copy Environment variables for in-place building
        command: |
          cp -vf ./.env.dist ./.env
          cp -vf ./.env.dist ./spec/mnt/data/conf/.env
          cp -vf ./.env ./services/broker/.env
          cp -vf ./.env ./services/console/.env
          cp -vf ./.env ./services/couchdb/.env
          cp -vf ./.env ./services/redis/.env
          cp -vf ./.env ./services/transformer/.env

    - run:
        name: Review configuration and environment
        command: |
          echo "Contents of ./conf"
          ls -la ./conf
          echo "Contents of ./.env"
          cat ./.env

    - run:
        name: Inject password to configuration and broker
        command: |
          echo "Injecting secret: ${REDIS_PASSWORD}"
          sed -i "s/changeme!/${REDIS_PASSWORD}/g" ./services/broker/test/mosquitto/mosquitto.conf
          cp ./spec/mnt/data/conf/config.json /mnt/data/conf/config.json

    - run:
        name: Mock self-signed CA and SSL certificates
        command: |
          cd spec/mnt/data/ssl
          ./_generate-ca-root-csr-and-sign-cert.sh
          cp ./testRoot.crt /usr/local/share/ca-certificates
          update-ca-certificates


    - run:
        name: Starting Influx
        command: |
          PUB=$(docker network inspect traefik-public)
          if [ "$PUB" == '[]' ]; then docker network create traefik-public; fi
          NAT=$(docker network inspect nat)
          if [ "$NAT" == '[]' ]; then docker network create nat ; fi
          docker compose up -d influxdb
          docker compose logs influxdb

    - run:
        name: Starting Redis
        command: |
          docker compose up -d thinx-redis
          docker compose logs thinx-redis

    - run:
        name: Starting Support Services
        command: |
          export ENVIRONMENT=test
          chmod -R 666 ./services/couchdb/*
          docker login --username $DOCKER_LOGIN --password $DOCKER_PASSWORD https://registry.thinx.cloud:5000
          docker compose up -d mosquitto transformer worker couchdb

    - run:
        name: Running Unit and Integration Tests 
        command: |
          export ENVIRONMENT=test
          pwd
          docker compose up --build api | tee -ia ./test.log
          echo "Docker test complete."
          if [[ ! $(grep "specs, 0 failures" ./test.log) ]]; then 
            echo "» TEST failed. Should not deploy this commit."
            grep "Failures:" ./test.log
            exit 1
          fi

    - run:
        name: Check running Docker containers
        command: |
            docker ps
            docker network ls
            docker network inspect bridge
            docker compose stop

    - store_test_results:
        name: Collect test data
        path: /mnt/data
        # The `path` key is an absolute or relative path to your working_directory containing 
        # subdirectories of JUnit XML or Cucumber JSON test metadata files,
        # or the path of a single file containing all test results.
        # Make sure that your path value is not a hidden folder (example: .my_hidden_directory would be an invalid format).

    - store_artifacts:
        name: Collect coverage data
        path: ./coverage
        destination: jest-coverage

  sysdig:
    executor: docker/docker
    steps:
      - setup_remote_docker:
          version: previous
      - checkout
      - docker/check
      - run:
          name: Install Sysdig Scanner
          command: |
            curl -LO "https://download.sysdig.com/scanning/bin/sysdig-cli-scanner/$(curl -L -s https://download.sysdig.com/scanning/sysdig-cli-scanner/latest_version.txt)/linux/amd64/sysdig-cli-scanner"
            chmod +x ./sysdig-cli-scanner
            SECURE_API_TOKEN=${SECURE_API_TOKEN} ./sysdig-cli-scanner --apiurl https://eu1.app.sysdig.com docker://thinxcloud/console --policy DefaultPolicy
#
# WORKFLOWS
#

workflows:

  #
  # public open-source site
  #

  main:

    jobs:

      - sysdig:
          context:
              - dockerhub
              - thinx-docker-repo
              - thinx-test
              - sysdig
          #requires:
          #  - build-base
          filters:
            branches:
              only:
                - sysdig

      - test:
          context:
              - dockerhub
              - thinx-docker-repo
              - thinx-test
              - sonarcloud
          #requires:
          #  - build-base
          filters:
            branches:
              only:
                - base
                - thinx-unit
                - thinx-class
                - thinx-staging
                - main
      
      - build-console-classic:
          context:
            - thinx-docker-repo
            - console
          filters:
            branches:
              only:
                - thinx-staging
                - main

      # - build-console-cloud:
      #     context:
      #       - thinx-docker-repo
      #       - console
      #     filters:
      #       branches:
      #         only:
      #           - thinx-console
      #           - thinx-staging
      #           - main

      - build-base:
          context:
            - dockerhub
          filters:
            branches:
              only:
                - base

      - build-api-cloud:
          context:
            - dockerhub
            - SonarCloud
            - thinx-slack
          requires:
            - test
          filters:
            branches:
              only:
                - thinx-staging
                - main
